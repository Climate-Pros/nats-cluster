// generated: {{.Timestamp}}
server_name: "{{.ServerName}}"
host: ::
port: 4222
http_port: 8222
max_payload: 8MB
jetstream: true
debug: false
trace: false

authorization {
    timeout:  10.0
}

pid_file: /var/run/nats-server.pid


jetstream {
    store_dir: /data/nats_data
    // 496MB 1024 * 1024 * 496
    max_memory_store: 520093696
    // 9GB 1024 * 1024 * 1024 * 9
    max_file_store: 9663676416
}

cluster: {
    name: "{{.Region}}"
    listen: "{{.Host}}:7221"
    routes: [
        "nats-route://{{.Region}}.{{.AppName}}.internal:7221"
    ]
    connect_retries: 60
}
gateway: {
    name: "{{.Region}}"
    listen: "{{.Host}}:7222"
    gateways: [
        {{range .GatewayRegions}}{name: "{{.}}", urls:["nats://{{.}}.{{$.AppName}}.internal:7222"]},{{end}}
    ]
}
reconnect_error_reports: 1

# Operator named {{.OperatorName}}
operator: {{.OperatorToken}}
# System Account named SYS
system_account: {{.SystemAccount}}

resolver {
    type: full
    # Directory in which the account jwt will be stored
    dir: '/jwt'
    # In order to support jwt deletion, set to true
    # If the resolver type is full delete will rename the jwt.
    # This is to allow manual restoration in case of inadvertent deletion.
    # To restore a jwt, remove the added suffix .delete and restart or send a reload signal.
    # To free up storage you must manually delete files with the suffix .delete.
    allow_delete: false
    # Interval at which a nats-server with a nats based account resolver will compare
    # it's state with one random nats based account resolver in the cluster and if needed,
    # exchange jwt and converge on the same set of jwt.
    interval: "2m"
    # Timeout for lookup requests in case an account does not exist locally.
    timeout: "1.9s"
}


# Preload the nats based resolver with the system account jwt.
# This is not necessary but avoids a bootstrapping system account.
# This only applies to the system account. Therefore other account jwt are not included here.
# To populate the resolver:
# 1) make sure that your operator has the account server URL pointing at your nats servers.
#    The url must start with: "nats://"
#    nsc edit operator --account-jwt-server-url nats://localhost:4222
# 2) push your accounts using: nsc push --all
#    The argument to push -u is optional if your account server url is set as described.
# 3) to prune accounts use: nsc push --prune
#    In order to enable prune you must set above allow_delete to true
# Later changes to the system account take precedence over the system account jwt listed here.
resolver_preload: {
	{{.SystemAccount}}: {{.ResolverPayload}}
}

websocket {
    # It can also be configured with individual parameters,
    # namely host and port.
    # host: "{{.Host}}" - # do not use host as we need it to work for multiple hosts
    port: 8443


    # For test environments, you can disable the need for TLS
    # by explicitly setting this option to `true`
    # And not needed on fly.io as fly terminates tls for us
    no_tls: true

    # [Cross-origin resource sharing option](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS).
    #
    # IMPORTANT! This option is used only when the http request presents an Origin
    # header, which is the case for web browsers. If no Origin header is present,
    # this check will not be performed.
    #
    # When set to `true`, the HTTP origin header must match the requestâ€™s hostname.
    # The default is `false`.
    #
    # same_origin: true

    # [Cross-origin resource sharing option](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS).
    #
    # IMPORTANT! This option is used only when the http request presents an Origin
    # header, which is the case for web browsers. If no Origin header is present,
    # this check will not be performed.
    #
    # List of accepted origins. When empty, and `same_origin` is `false`, clients from any origin are allowed to connect.
    # This list specifies the only accepted values for the client's request Origin header. The scheme,
    # host and port must match. By convention, the absence of TCP port in the URL will be port 80
    # for an "http://" scheme, and 443 for "https://".
    #
    # allowed_origins [
    #    "http://www.example.com"
    #    "https://www.other-example.com"
    # ]

}
